/*
 * AddConceptDialog.java
 *
 * Created on May 18, 2006, 3:45 PM
 */

package vars.knowledgebase.ui.dialogs;

import foxtrot.Job;
import foxtrot.Worker;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.ImageIcon;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.mbari.swing.JFancyButton;
import org.mbari.util.Dispatcher;
import org.mbari.vars.dao.DAOException;
import org.mbari.vars.dao.IDataObject;
import org.mbari.vars.knowledgebase.model.Concept;
import org.mbari.vars.knowledgebase.model.ConceptName;
import org.mbari.vars.knowledgebase.model.HistoryFactory;
import vars.knowledgebase.IConceptName;
import org.mbari.vars.knowledgebase.model.dao.ConceptDAO;
import org.mbari.vars.knowledgebase.model.dao.KnowledgeBaseCache;
import org.mbari.vars.knowledgebase.ui.KnowledgebaseApp;
import org.mbari.vars.knowledgebase.ui.KnowledgebaseFrame;
import org.mbari.vars.knowledgebase.ui.actions.ApproveHistoryTask;
import org.mbari.vars.model.UserAccount;
import org.mbari.vars.ui.AllConceptNamesComboBox;
import org.mbari.vars.util.AppFrameDispatcher;
import vars.IUserAccount;
import vars.knowledgebase.IConcept;
import vars.knowledgebase.IHistory;

/**
 * @author brian
 */
public class AddConceptDialog extends javax.swing.JDialog {

    private static final long serialVersionUID = 6993327643414741677L;
    private static final Logger log = LoggerFactory.getLogger(AddConceptDialog.class);
    /**
	 * @uml.property  name="actionSupport"
	 * @uml.associationEnd  multiplicity="(1 1)" inverse="this$0:org.mbari.vars.knowledgebase.ui.dialogs.AddConceptDialog$ActionSupport"
	 */
    private final ActionSupport actionSupport = new ActionSupport();  //  @jve:decl-index=0:
    /**
	 * @uml.property  name="concept"
	 * @uml.associationEnd  
	 */
    private IConcept concept;  //  @jve:decl-index=0:


    /**
     * Creates new form AddConceptDialog
     */
    public AddConceptDialog() {
        super(AppFrameDispatcher.getFrame(), true);
        initComponents();
        initModel();
        setLocationRelativeTo(AppFrameDispatcher.getFrame());
        pack();
    }


    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        nameLabel = new javax.swing.JLabel();
        authorLabel = new javax.swing.JLabel();
        authorField = new javax.swing.JTextField();
        nameField = new javax.swing.JTextField();
        parentLabel = new javax.swing.JLabel();
        conceptComboBox = new AllConceptNamesComboBox();
        cancelButton = new JFancyButton();
        okButton = new JFancyButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        titleText = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        nodcField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        referenceText = new javax.swing.JTextArea();
        rankNameComboBox = new javax.swing.JComboBox();
        rankLevelComboBox = new javax.swing.JComboBox();

        setTitle("VARS - Create a New Concept");
        nameLabel.setText("Name:");

        authorLabel.setText("Parent:");

        authorField.setToolTipText("(OPTIONAL) The author is the person who first described this species in the scientific literature");

        nameField.setToolTipText("The primary name to be used for this concept.");

        parentLabel.setText("Author:");

        getConceptComboBox().setModel(getConceptComboBox().getModel());
        getConceptComboBox().setSelectedItem(IConceptName.NAME_DEFAULT);
        getConceptComboBox().setToolTipText("The parent concept. This concept will be a child of this parent.");

        cancelButton.setText("Cancel");
        cancelButton.setIcon(new ImageIcon(getClass().getResource("/images/vars/knowledgebase/delete2.png")));
        
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        cancelButton.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cancelButtonKeyReleased(evt);
            }
        });

        okButton.setText("OK");
        okButton.setIcon(new ImageIcon(getClass().getResource("/images/vars/knowledgebase/check2.png")));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        okButton.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyReleased(java.awt.event.KeyEvent evt) {
                okButtonKeyReleased(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        titleText.setColumns(20);
        titleText.setWrapStyleWord(true);
        titleText.setLineWrap(true);
        titleText.setEditable(false);
        titleText.setRows(5);
        titleText.setText("Create/edit a concept. You must provide a name and select the parent concept. All other fields are optional.");
        titleText.setFocusable(false);
        jScrollPane1.setViewportView(titleText);

        jLabel1.setText("Nodc Code:");

        nodcField.setToolTipText("(OPTIONAL) The nodc code is also called the Taxonomic Serial Number. More information can be found at http://www.itis.usda.gov");

        jLabel2.setText("Rank Name:");

        jLabel3.setText("Rank Level:");

        jLabel4.setText("Reference:");

        referenceText.setColumns(20);
        referenceText.setRows(5);
        referenceText.setToolTipText("(OPTIONAL) A reference to literature that contains a description of this concept.");
        jScrollPane2.setViewportView(referenceText);

        rankNameComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "kingdom", "phylum", "class", "order", "family", "genus", "species" }));
        rankNameComboBox.setToolTipText("(OPTIONAL) The taxonomic rank");

        rankLevelComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "infra", "sub", "super" }));
        rankLevelComboBox.setToolTipText("(OPTIONAL) This modifies the taxonomic rank");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(okButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cancelButton))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(jLabel2)
                            .add(jLabel3)
                            .add(jLabel4)
                            .add(authorLabel)
                            .add(nameLabel)
                            .add(parentLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, nameField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, nodcField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, rankNameComboBox, 0, 275, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, rankLevelComboBox, 0, 275, Short.MAX_VALUE)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                            .add(authorField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(getConceptComboBox(), 0, 275, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(13, 13, 13)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(nameLabel)
                    .add(nameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(authorLabel)
                    .add(getConceptComboBox(), org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(parentLabel)
                    .add(authorField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(nodcField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(rankNameComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(rankLevelComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel4)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cancelButton)
                    .add(okButton))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    @Override
    public void setVisible(boolean b) {
        if (b) {
           nameField.requestFocus();
        }
        super.setVisible(b);
    }

    private void cancelButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelButtonKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cancelButtonActionPerformed(null);
        }
    }//GEN-LAST:event_cancelButtonKeyReleased

    private void okButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_okButtonKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            okButtonActionPerformed(null);
        }
    }//GEN-LAST:event_okButtonKeyReleased

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
        setConcept(null);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        setVisible(false);
        if (concept == null) {
            concept = actionSupport.createConcept();
        }
        try {
            if (concept != null) {
                actionSupport.updateValues(concept);
            }
        }
        catch (DAOException ex) {
            log.error("Update failed for " + concept, ex);
            AppFrameDispatcher.showErrorDialog("Failed to update all the " +
                    "values in the concept '" +
                    concept.getPrimaryConceptNameAsString() + "'");
        }

        final Frame frame = AppFrameDispatcher.getFrame();
        if ((frame != null) && (frame instanceof KnowledgebaseFrame)) {
            final String name = concept.getPrimaryConceptNameAsString();
            Worker.post(new Job() {
                public Object run() {
                    ((KnowledgebaseFrame) frame).refreshTreeAndOpenNode(name);
                    return null;
                }

            });
        }

        setConcept(null);

    }//GEN-LAST:event_okButtonActionPerformed

    private void initModel() {
    	
    	final Dispatcher conceptDispatcher = KnowledgebaseApp.DISPATCHER_SELECTED_CONCEPT;
    	
        /*
        * Listen for the node in the tree that's been selected to set the
        * selection in the combobox
        */
    	conceptDispatcher.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(final PropertyChangeEvent evt) {
                final Concept selectedConcept = (Concept) evt.getNewValue();
                String conceptName = IConceptName.NAME_DEFAULT;
                if (selectedConcept != null) {
                    conceptName = selectedConcept.getPrimaryConceptNameAsString();
                }
                getConceptComboBox().getModel().setSelectedItem(conceptName);
            }
        });
    	
    	/*
    	 * It's important to do this. Otherwise when the dialog is first displayed
    	 * the conceptComboBox will have 'object' selected no matter what node is
    	 * being edited.
    	 */
    	final Concept selectedConcept = (Concept) KnowledgebaseApp.DISPATCHER_SELECTED_CONCEPT.getValueObject();
    	String conceptName = IConceptName.NAME_DEFAULT;
    	if (selectedConcept != null) {
    		conceptName = selectedConcept.getPrimaryConceptNameAsString();
    	}
    	getConceptComboBox().getModel().setSelectedItem(conceptName);
        

    }


    /**
	 * @param concept  the concept to set
	 * @uml.property  name="concept"
	 */
    public void setConcept(IConcept concept) {
        this.concept = concept;
        if (concept == null) {
            nameField.setEnabled(true);
            nameField.setText("");
            authorField.setText("");
            nodcField.setText("");
            rankLevelComboBox.setSelectedIndex(0);
            rankNameComboBox.setSelectedIndex(0);
            referenceText.setText("");
            setTitle("VARS - Create a New Concept");
        }
        else {
            nameField.setEnabled(false);
            nameField.setText(concept.getPrimaryConceptNameAsString());
            authorField.setText(concept.getPrimaryConceptName().getAuthor());
            nodcField.setText(concept.getNodcCode());
            rankLevelComboBox.setSelectedItem(concept.getRankLevel());
            rankNameComboBox.setSelectedItem(concept.getRankName());
            referenceText.setText(concept.getReference());
            getConceptComboBox().setSelectedItem(concept.getParentConcept().getPrimaryConceptNameAsString());
            setTitle("VARS - Edit an Existing Concept");
        }

    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddConceptDialog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
	 * @uml.property  name="authorField"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JTextField authorField;
    /**
	 * @uml.property  name="authorLabel"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JLabel authorLabel;
    /**
	 * @uml.property  name="cancelButton"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JButton cancelButton;
    /**
	 * @uml.property  name="conceptComboBox"
	 * @uml.associationEnd  multiplicity="(0 -1)" elementType="java.lang.String"
	 */
    private javax.swing.JComboBox conceptComboBox;
    /**
	 * @uml.property  name="jLabel1"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JLabel jLabel1;
    /**
	 * @uml.property  name="jLabel2"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JLabel jLabel2;
    /**
	 * @uml.property  name="jLabel3"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JLabel jLabel3;
    /**
	 * @uml.property  name="jLabel4"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JLabel jLabel4;
    /**
	 * @uml.property  name="jScrollPane1"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JScrollPane jScrollPane1;
    /**
	 * @uml.property  name="jScrollPane2"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JScrollPane jScrollPane2;
    /**
	 * @uml.property  name="nameField"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JTextField nameField;
    /**
	 * @uml.property  name="nameLabel"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JLabel nameLabel;
    /**
	 * @uml.property  name="nodcField"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JTextField nodcField;
    /**
	 * @uml.property  name="okButton"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JButton okButton;
    /**
	 * @uml.property  name="parentLabel"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JLabel parentLabel;
    /**
	 * @uml.property  name="rankLevelComboBox"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JComboBox rankLevelComboBox;
    /**
	 * @uml.property  name="rankNameComboBox"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JComboBox rankNameComboBox;
    /**
	 * @uml.property  name="referenceText"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JTextArea referenceText;
    /**
	 * @uml.property  name="titleText"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JTextArea titleText;
    // End of variables declaration//GEN-END:variables


    private class ActionSupport {
        public IConcept createConcept() {

            /*
             * Get the parent concept
             */
            IConcept concept = null;
            IConcept parentConcept = null;
            try {
                parentConcept = KnowledgeBaseCache.getInstance().findConceptByName((String) getConceptComboBox().getSelectedItem());
            }
            catch (DAOException ex) {
                AppFrameDispatcher.showErrorDialog("Failed to lookup '" + getConceptComboBox().getSelectedItem() + "'. Canceling your request");
                return concept;
            }

            if (parentConcept == null) {
                // TODO brian: Make sure that there are no existing root concepts
                throw new RuntimeException("No parent Concept was specified. You MUST Specify a parent Concept");
            }

            /*
             * Check userAccount status
             */
            UserAccount userAccount = (UserAccount) KnowledgebaseApp.DISPATCHER_USERACCOUNT.getValueObject();
            boolean okToProceed = (userAccount != null);

            String primaryName = nameField.getText();
            if (okToProceed && (primaryName != null)) {

                // Do not add a concept with a name that already exists in the database
                IConcept existingConcept = null;
                try {
                    existingConcept = KnowledgeBaseCache.getInstance().findConceptByName(primaryName);
                }
                catch (DAOException e) {
                    if (log.isErrorEnabled()) {
                        log.error( "Failed to lookup '" + primaryName +
                                "' in the knowledgebase", e);
                    }

                    AppFrameDispatcher.showErrorDialog("Unable to complete " +
                                "your request. An error occured while attempting " +
                                "to query the database");
                    okToProceed = false;
                }

                if (okToProceed && (existingConcept != null)) {
                    AppFrameDispatcher.showErrorDialog( "Unable to complete your " + 
                            "request. The name, '" + primaryName +
                            "' already exists in the knowledgebase.");
                    okToProceed = false;
                }

                // Add the concept to the database;

                if (okToProceed) {
                    concept = new Concept();
                    // Set reuired fields
                    IConceptName conceptName = new ConceptName();
                    conceptName.setName(primaryName);
                    conceptName.setNameType(IConceptName.NAMETYPE_PRIMARY);
                    concept.addConceptName(conceptName);
                    concept.setOriginator(userAccount.getUserName());
                    parentConcept.addChildConcept(concept);

                    try {
                        ConceptDAO.getInstance().insert((IDataObject) concept);
                    }
                    catch (DAOException e) {
                        log.error("Failed to insert " + concept, e);
                        AppFrameDispatcher.showErrorDialog("Unable to complete " +
                                "your request. There was a problem with the " +
                                "database transaction.");
                        parentConcept.removeChildConcept(concept);
                        okToProceed = false;
                    }
                }

                // Generate a history for the new Concept
                IHistory history = null;
                if (okToProceed) {
                    history = HistoryFactory.add(userAccount, concept);
                    parentConcept.addHistory(history);
                    if (log.isDebugEnabled()) {
                    	log.debug("Adding " + history + " to " + parentConcept);
                    }
                    try {
                        ConceptDAO.getInstance().update((IDataObject) parentConcept);
                        ConceptDAO.getInstance().update((IDataObject) parentConcept);
                    }
                    catch (DAOException e) {
                        log.error("Failed to update " + parentConcept, e);
                        AppFrameDispatcher.showWarningDialog("There is a problem " +
                                "with the database connection. Unable to add history" +
                                " information to the database.");
                    }

                    /*
                     * If the user is an admin then you can approve
                     */
                    if (userAccount.isAdmin()) {
                        ApproveHistoryTask.approve(userAccount, history);
                    }
                }


            }
            return concept;
        }


        void updateValues(final IConcept concept) throws DAOException {

            final ConceptDAO dao = ConceptDAO.getInstance();
            final IUserAccount userAccount = (UserAccount) KnowledgebaseApp.DISPATCHER_USERACCOUNT.getValueObject();

            /*
            * Modify the parent concept
            */
            final String parentName = (String) getConceptComboBox().getSelectedItem();
            final Concept oldParentConcept = (Concept) concept.getParentConcept();
            final Concept newParentConcept = KnowledgeBaseCache.getInstance().findConceptByName(parentName);

            /*
             * Make sure that you didn't tyr to add it to a descendant
             */
            if (concept.hasDescendent(parentName)) {
                AppFrameDispatcher.showWarningDialog("The parent that you specified, '" + parentName + "', is already a child" +
                        " of '" + concept.getPrimaryConceptNameAsString() + "'. This is not allowed. Your request to move" +
                        " the concept is being ignored.");
            }
            else if (!newParentConcept.equals(oldParentConcept) &&
                    !newParentConcept.equals(concept)) {

                if (oldParentConcept != null) {
                    oldParentConcept.removeChildConcept(concept);
                    dao.update(oldParentConcept);
                }
                newParentConcept.addChildConcept(concept);
                dao.update(newParentConcept);
                final IHistory history = HistoryFactory.replaceParentConcept(userAccount, oldParentConcept, newParentConcept);
                concept.addHistory(history);

                /*
                 * If the user is an admin then you can approve
                 */
                if (userAccount.isAdmin()) {
                    ApproveHistoryTask.approve(userAccount, history);
                }
            }

            // Set optional fields
            final String oldNodcCode = concept.getNodcCode();
            final String nodcCode = isValidString(nodcField.getText()) ? nodcField.getText() : null;
        	if ((nodcCode != null && !nodcCode.equals(oldNodcCode)) || 
        			(nodcCode == null && oldNodcCode != null)) {
        		final IHistory history = HistoryFactory.replaceNodcCode(userAccount, oldNodcCode, nodcCode);
        		concept.addHistory(history);
        		concept.setNodcCode(nodcCode);
        		if (userAccount.isAdmin()) {
        			ApproveHistoryTask.approve(userAccount, history);
        		}
        	}

        	final String oldRankName = concept.getRankName();
            final String rankName = isValidString((String) rankNameComboBox.getSelectedItem()) ? (String) rankNameComboBox.getSelectedItem() : null;
        	if ((rankName != null && !rankName.equals(oldRankName)) || 
        			(rankName == null && oldRankName != null)) {
        		final IHistory history = HistoryFactory.replaceRankName(userAccount, oldRankName, rankName);
        		concept.addHistory(history);
        		concept.setRankName(rankName);
        		if (userAccount.isAdmin()) {
        			ApproveHistoryTask.approve(userAccount, history);
        		}
        	}

        	final String oldRankLevel = concept.getRankLevel();
            final String rankLevel = isValidString((String) rankLevelComboBox.getSelectedItem()) ? (String) rankLevelComboBox.getSelectedItem() : null;
        	if ((rankLevel != null && !rankLevel.equals(oldRankLevel)) || 
        			(rankLevel == null && oldRankLevel != null)) {
        		final IHistory history = HistoryFactory.replaceRankLevel(userAccount, oldRankLevel, rankLevel);
        		concept.addHistory(history);
        		concept.setRankLevel(rankLevel);
        		if (userAccount.isAdmin()) {
        			ApproveHistoryTask.approve(userAccount, history);
        		}
        	}
        	
        	final String oldReference = concept.getReference();
            final String reference = isValidString(referenceText.getText()) ? referenceText.getText() : null;
        	if ((reference != null && !reference.equals(oldReference)) || 
        			(reference == null && oldReference != null)) {
        		final IHistory history = HistoryFactory.replaceReference(userAccount, oldReference, reference);
        		concept.addHistory(history);
        		concept.setReference(reference);
        		if (userAccount.isAdmin()) {
        			ApproveHistoryTask.approve(userAccount, history);
        		}
        	}

            final String author = authorField.getText();
            final ConceptName primaryName = (ConceptName) concept.getPrimaryConceptName();
            if (isValidString(author)) {
                primaryName.setAuthor(author);
            }
            else {
                primaryName.setAuthor(null);
            }

            dao.update((IDataObject) concept);
        }
    }

    private boolean isValidString(String s) {
        return s != null && s.length() > 0 && !s.matches("\\A\\s+");
    }


	/**
	 * @return  the conceptComboBox
	 * @uml.property  name="conceptComboBox"
	 */
	public javax.swing.JComboBox getConceptComboBox() {
		return conceptComboBox;
	}


}
