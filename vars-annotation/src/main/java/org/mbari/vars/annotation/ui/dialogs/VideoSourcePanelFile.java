/*
 * VideoSourcePanelFile.java
 *
 * Created on March 19, 2007, 1:53 PM
 */

package org.mbari.vars.annotation.ui.dialogs;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.Collection;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;

import org.jdesktop.layout.GroupLayout;
import org.jdesktop.layout.LayoutStyle;
import org.mbari.awt.event.NonDigitConsumingKeyListener;
import org.mbari.text.IgnoreCaseToStringComparator;
import org.mbari.vars.annotation.ui.actions.OpenQT4JVideoArchiveAction;
import org.mbari.vars.util.AppFrameDispatcher;
import vars.util.VARSProperties;
import org.mbari.vcr.qt.TimeSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author  brian
 */
public class VideoSourcePanelFile extends javax.swing.JPanel implements IVideoSourcePanel {
    
    private JButton browseButton;
    private boolean validVideoSource;
    public static final String PROP_VALID_VIDEO_SOURCE = "validVideoSource";
    private OpenQT4JVideoArchiveAction openAction = new OpenQT4JVideoArchiveAction();
    private static final Logger log = LoggerFactory.getLogger(VideoSourcePanelFile.class);
    
    /** Creates new form VideoSourcePanelFile */
    public VideoSourcePanelFile() {
        initComponents();
        postInit();
    }
    
    private void postInit() {
        diveNumberTextField.addKeyListener(new LocalKeyAdapter());
        hdCheckBox.setSelected(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        urlTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        timeSourceComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        cameraPlatformComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        diveNumberTextField = new javax.swing.JTextField();
        hdCheckBox = new javax.swing.JCheckBox();

        jLabel1.setText("Movie URL:");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setViewportView(urlTextField);

        jLabel2.setText("Index Movie Using: ");

        timeSourceComboBox.setModel(new DefaultComboBoxModel(TimeSource.values()));

        jLabel3.setText("Camera Platform:");

        cameraPlatformComboBox.setModel(new DefaultComboBoxModel(listCameraPlatforms()));

        jLabel4.setText("Dive Number:");

        hdCheckBox.setText("Check if High Definition");
        hdCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        hdCheckBox.setEnabled(false);
        hdCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        layout.setHorizontalGroup(
        	layout.createParallelGroup(GroupLayout.LEADING)
	        	.add(layout.createSequentialGroup()
		        	.addContainerGap()
		        	.add(layout.createParallelGroup(GroupLayout.LEADING)
			        	.add(layout.createSequentialGroup()
				        	.add(layout.createParallelGroup(GroupLayout.LEADING)
					        	.add(jLabel3)
					        	.add(jLabel4)
					        	.add(jLabel2))
				        	.addPreferredGap(LayoutStyle.RELATED)
				        	.add(layout.createParallelGroup(GroupLayout.LEADING)
					        	.add(timeSourceComboBox, 0, 342, Short.MAX_VALUE)
					        	.add(GroupLayout.TRAILING, diveNumberTextField, GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
					        	.add(cameraPlatformComboBox, 0, 342, Short.MAX_VALUE)))
			        	.add(layout.createSequentialGroup()
				        	.add(jLabel1)
				        	.addPreferredGap(LayoutStyle.RELATED)
				        	.add(layout.createParallelGroup(GroupLayout.LEADING)
					        	.add(jScrollPane1, GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
					        	.add(layout.createSequentialGroup()
						        	.add(hdCheckBox)
						        	.addPreferredGap(LayoutStyle.RELATED, 115, Short.MAX_VALUE)
						        	.add(getBrowseButton())
						        	.add(2, 2, 2)))))
		        	.addContainerGap())
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(GroupLayout.LEADING)
	        	.add(layout.createSequentialGroup()
		        	.addContainerGap()
		        	.add(layout.createParallelGroup(GroupLayout.BASELINE)
			        	.add(jLabel3)
			        	.add(cameraPlatformComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
		        	.addPreferredGap(LayoutStyle.RELATED)
		        	.add(layout.createParallelGroup(GroupLayout.LEADING)
			        	.add(jLabel4)
			        	.add(diveNumberTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
		        	.addPreferredGap(LayoutStyle.RELATED)
		        	.add(layout.createParallelGroup(GroupLayout.LEADING)
			        	.add(jLabel2)
			        	.add(timeSourceComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
		        	.addPreferredGap(LayoutStyle.RELATED)
		        	.add(layout.createParallelGroup(GroupLayout.LEADING)
			        	.add(jLabel1)
			        	.add(jScrollPane1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
		        	.add(layout.createParallelGroup(GroupLayout.LEADING)
			        	.add(layout.createSequentialGroup()
				        	.addPreferredGap(LayoutStyle.RELATED)
				        	.add(hdCheckBox))
			        	.add(layout.createSequentialGroup()
				        	.add(3, 3, 3)
				        	.add(getBrowseButton())))
		        	.addContainerGap(213, Short.MAX_VALUE))
        );
        this.setLayout(layout);
    }// </editor-fold>//GEN-END:initComponents

    public void open() {
        try {
            String cameraPlatform = (String) cameraPlatformComboBox.getSelectedItem();
            TimeSource timeSource = (TimeSource) timeSourceComboBox.getSelectedItem();
            int seqNumber = Integer.parseInt(diveNumberTextField.getText());
            URL url = new URL(urlTextField.getText());
            
            openAction.setCameraPlatfrom(cameraPlatform);
            openAction.setSeqNumber(seqNumber);
            openAction.setUrl(url);
            openAction.setTimeSource(timeSource);
            openAction.doAction();
        } 
        catch (NumberFormatException e) {
            AppFrameDispatcher.showErrorDialog("Dive number, " + diveNumberTextField.getText() + ", is not an integer");
        } 
        catch (MalformedURLException e) {
            AppFrameDispatcher.showErrorDialog("The movie URL you provided, '" + urlTextField.getText() + "', is not a valid URL");
        }
        catch (Exception e) {
            log.error("Error occured when trying to open VideoArchive", e);
            AppFrameDispatcher.showErrorDialog("An error occurred. Reason: " + e.getMessage());
        }
    }
    
    private String[] listCameraPlatforms() {
        final Collection cameraPlatforms = VARSProperties.getCameraPlatforms();
        String[] cp = new String[cameraPlatforms.size()];
        cameraPlatforms.toArray(cp);
        Arrays.sort(cp, new IgnoreCaseToStringComparator());
        return cp;
    }

    public boolean isValidVideoSource() {
        //return validVideoSource;
        return true;
    }
    
    private void validateVideoSource() {
        boolean oldValue = validVideoSource;
        validVideoSource = (diveNumberTextField.getText() != null) && 
                (!diveNumberTextField.getText().equals("")) &&
                (urlTextField.getText() != null) &&
                (!urlTextField.getText().equals(""));
        URL url = null;
        if (validVideoSource) {
            try {
                url = new URL(urlTextField.getText());
            }
            catch (MalformedURLException e) {
                log.warn("The URL, " + url.toExternalForm() + ", is malformed");
                validVideoSource = false;
            }
        }
        firePropertyChange(PROP_VALID_VIDEO_SOURCE, oldValue, validVideoSource);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cameraPlatformComboBox;
    private javax.swing.JTextField diveNumberTextField;
    private javax.swing.JCheckBox hdCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox timeSourceComboBox;
    private javax.swing.JTextField urlTextField;
    // End of variables declaration//GEN-END:variables
    
    /**
     * KeyAdapter that only allows entry of digit characters. Revalidates 
     * video source on keystroke.
     */
    class LocalKeyAdapter extends NonDigitConsumingKeyListener {
        @Override
        public void keyTyped(KeyEvent e) {
            super.keyTyped(e);
            validateVideoSource();
        }
    }
    /**
     * @return
     */
	protected JButton getBrowseButton() {
		if (browseButton == null) {
			browseButton = new JButton();
			browseButton.setText("Browse");
			browseButton.setToolTipText("Browse for local file");
			browseButton.addActionListener(new ActionListener() {
				
				final JFileChooser chooser = new JFileChooser();

				public void actionPerformed(ActionEvent e) {
					int option = chooser.showOpenDialog(VideoSourcePanelFile.this);
					if (option == JFileChooser.APPROVE_OPTION) {
						File file = chooser.getSelectedFile();
						try {
							urlTextField.setText(file.toURL().toExternalForm());
						}
						catch (MalformedURLException e1) {
							log.warn("Invalid File", e1);
						}
					}
					
				}
				
			});
		}
		return browseButton;
	}
}
